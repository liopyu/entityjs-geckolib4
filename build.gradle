buildscript {
    repositories {
        maven { url  = 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven {
            name = "Fabric"
            url = "https://maven.fabricmc.net/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.0"
    }
}

plugins {
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
    id 'fabric-loom' version '1.5-SNAPSHOT'
}
apply plugin: 'fabric-loom'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'com.matthewprenger.cursegradle'
apply from: "https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle"
apply plugin: "com.modrinth.minotaur"
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import com.modrinth.minotaur.dependencies.ModDependency


sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url 'https://maven.blamejared.com' }
    maven { url "https://cfa2.cursemaven.com" }
    maven { url "https://maven.cloudsmith.io/geckolib3/geckolib/" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
    maven { url = "https://maven.terraformersmc.com/" }
}
configurations {
    shade
}


/*
repositories {
    maven { url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
    maven { url "https://maven.enginehub.org/repo/" }
    maven { url "https://maven.blamejared.com" }
    maven { url "https://minecraft.curseforge.com/api/maven/" }
    maven { url "https://maven.cloudsmith.io/geckolib3/geckolib/" }
	maven { url "https://cursemaven.com" }
    maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
}*/

dependencies {
    // Minecraft/Fabric deps
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    //mappings( loom.layered() {
    //	officialMojangMappings()
    //	parchment("org.parchmentmc.data:parchment-1.19.2:2022.08.14@zip")
    //})
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    implementation(include('com.eliotlash.mclib:mclib:20'))

}

shadowJar {
    configurations = [project.configurations.shade]
    from sourceSets.main.allSource
    exclude('META-INF/services/**')
    exclude('it/**')
    exclude('com/google/**')
    relocate 'com.eliotlash', 'net.lio.shadowed.eliotlash'
}


shadowJar {
    configurations = [project.configurations.shade]
    from sourceSets.main.output
    duplicatesStrategy = 'exclude'
    exclude('META-INF/services/**')
    exclude('it/**')
    exclude('com/google/**')
    relocate 'com.eliotlash', 'software.bernie.shadowed.eliotlash'
    //classifier 'dev'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "LioLib",
                "Specification-Vendor"    : "Lio",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.mod_version,
                "Implementation-Vendor"   : "Lio",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

loom {
    accessWidenerPath = file("src/main/resources/liolib.aw")
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

artifacts {
    archives shadowJar
}

java {
    withSourcesJar()
}

jar {
    from "LICENSE"
}

remapJar {
    dependsOn(shadowJar)
    inputFile = shadowJar.archiveFile
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = project.archives_base_name
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

publishing {
    repositories {
        maven {
            name = "cloudsmith"
            url = "https://maven.cloudsmith.io/geckolib3/geckolib/"
            def releasesRepoUrl = "https://maven.cloudsmith.io/geckolib3/geckolib/"
            def snapshotsRepoUrl = "https://maven.cloudsmith.io/geckolib3/geckolib/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                def envUsername = System.getenv("cloudUsername")
                def envPassword = System.getenv("cloudPassword")
                username = envUsername == null ? findProperty("cloudUsername") : envUsername
                password = envPassword == null ? findProperty("cloudPassword") : envPassword
            }
        }
    }
}

processResources {
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    curseforge {

        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())

        project {
            apiKey = curseProp.getProperty('curseKey')
            id = "388172"
            releaseType = "release"
            changelogType = 'text'
            changelog = file('changelog.txt')
            addGameVersion("1.19.2")
            addGameVersion("Fabric")
            addGameVersion("Java 17")

            relations {
                requiredDependency 'fabric-api'
            }
            mainArtifact(remapJar)

            afterEvaluate {
                uploadTask.dependsOn("remapJar")
            }
        }
        options {
            //debug = true
            forgeGradleIntegration = false
        }
    }
}

if (file('key.properties').exists()) {
    modrinth {
        def modrinthProp = new Properties()
        File secretPropsFile = file("key.properties")
        modrinthProp.load(secretPropsFile.newInputStream())

        token = modrinthProp.getProperty('modrinthKey')
        projectId = '8BmcQJ2H'
        versionNumber = project.mod_version
        versionName = 'Fabric 1.19.2'
        uploadFile = remapJar
        changelog = rootProject.file("changelog.txt").text
        gameVersions = ['1.19.2']
        versionType = "release"
        loaders = ['fabric']
        dependencies {
            required.project "fabric-api"
        }
    }
}